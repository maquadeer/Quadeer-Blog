[{"content":"","date":"6 November 2023","permalink":"/","section":"Abdul Quadeer's blog","summary":"","title":"Abdul Quadeer's blog"},{"content":" Network Command Explanation #   tcpdump #  tcpdump is a packet analyzer tool that allows you to capture and analyze network traffic. You can adjust the interface and packet count as needed for your specific use case.\n netstat #  netstat is a command-line utility for displaying network statistics, including open ports and active network connections. The command netstat -tuln shows listening TCP and UDP ports.\n ifconfig #  ifconfig is used to display and configure network interface parameters, including IP addresses, netmasks, and more. It provides information about the network interfaces on your system.\n nslookup #  nslookup is a network utility for performing DNS (Domain Name System) lookups. In the provided example, it performs a DNS lookup for \u0026lsquo;example.com\u0026rsquo;, returning information about the domain\u0026rsquo;s IP addresses.\n FTP #  FTP (File Transfer Protocol) is a network protocol used for transferring files between a client and a server. To interact with FTP programmatically, you should use dedicated FTP client libraries in C, as the command-line ftp client may not be suitable for automation.\n TELNET #  TELNET is a network protocol that allows terminal access to remote systems. To interact with TELNET servers programmatically, you\u0026rsquo;ll need to use a TELNET library or API, as it\u0026rsquo;s not straightforward to automate using a command-line program.\n traceroute #  traceroute is a network diagnostic tool used to trace the route that packets take from your computer to a destination host (e.g., \u0026lsquo;example.com\u0026rsquo;). It displays a list of intermediate routers and their response times.\nPlease note that some of these services/commands may require additional configuration, and some may not be available on all systems. The specific options and usage may vary depending on your operating system and network setup.\n#include \u0026lt;stdio.h\u0026gt;#include \u0026lt;stdlib.h\u0026gt; int main() { int choice; while (1) { printf(\u0026#34;Select an option:\\n\u0026#34;); printf(\u0026#34;1. Run tcpdump\\n\u0026#34;); printf(\u0026#34;2. Run netstat\\n\u0026#34;); printf(\u0026#34;3. Run ifconfig\\n\u0026#34;); printf(\u0026#34;4. Run nslookup\\n\u0026#34;); printf(\u0026#34;5. Run FTP\\n\u0026#34;); printf(\u0026#34;6. Run TELNET\\n\u0026#34;); printf(\u0026#34;7. Run traceroute\\n\u0026#34;); printf(\u0026#34;8. Exit\\n\u0026#34;); printf(\u0026#34;Enter your choice: \u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;choice); switch (choice) { case 1: system(\u0026#34;tcpdump -i eth0\u0026#34;); // Replace \u0026#39;eth0\u0026#39; with your network interface  break; case 2: system(\u0026#34;netstat -tuln\u0026#34;); break; case 3: system(\u0026#34;ifconfig\u0026#34;); break; case 4: printf(\u0026#34;Enter the hostname to look up: \u0026#34;); char hostname[256]; scanf(\u0026#34;%s\u0026#34;, hostname); char nslookupCommand[256]; sprintf(nslookupCommand, \u0026#34;nslookup %s\u0026#34;, hostname); system(nslookupCommand); break; case 5: system(\u0026#34;ftp\u0026#34;); // This will start an interactive FTP session  break; case 6: system(\u0026#34;telnet\u0026#34;); // This will start an interactive TELNET session  break; case 7: printf(\u0026#34;Enter the destination IP or hostname for traceroute: \u0026#34;); char dest[256]; scanf(\u0026#34;%s\u0026#34;, dest); char tracerouteCommand[256]; sprintf(tracerouteCommand, \u0026#34;traceroute %s\u0026#34;, dest); system(tracerouteCommand); break; case 8: exit(0); default: printf(\u0026#34;Invalid choice. Please try again.\\n\u0026#34;); } } return 0; } .\n","date":"6 November 2023","permalink":"/posts/computer-network/","section":"Posts","summary":"Network Command Explanation #   tcpdump #  tcpdump is a packet analyzer tool that allows you to capture and analyze network traffic.","title":"Computer Network"},{"content":"","date":"6 November 2023","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":" Things to Do After Installing a Debian-Based Distro #  Congratulations on installing your Debian-based Linux distribution! To make the most of your new operating system, here is a list of essential tasks to complete and things to consider after the installation.\n Update and Upgrade Your System #  Before you start customizing your system, it\u0026rsquo;s crucial to ensure your installation is up to date:\nOpen a terminal and run the following commands:\nsudo apt update sudo apt upgrade This will update your package list and upgrade all installed packages to their latest versions.\n Install Additional Software #    Package Management: Debian-based systems use APT (Advanced Package Tool) for package management. You can install software using the apt command. For example:\n To install a web browser (e.g., Firefox): sudo apt install firefox To install an office suite (e.g., LibreOffice): sudo apt install libreoffice    Software Center: Many Debian-based distributions come with a software center where you can easily browse and install software using a graphical interface.\n  Snap and Flatpak: Consider enabling Snap or Flatpak for access to additional software not available in the official repositories. You may need to install the Snap or Flatpak runtime.\n Snap: sudo apt install snapd Flatpak: Check your distribution\u0026rsquo;s documentation for installation instructions.     Configure System Repositories #  Ensure that your system is configured to access the appropriate repositories, including security updates and third-party sources if needed. Edit the /etc/apt/sources.list file or use a software source management tool, like software-properties-gtk (for Debian/Ubuntu systems).\nsudo software-properties-gtk  Install Proprietary Drivers #  If your system requires proprietary drivers for optimal hardware support, install them via the \u0026ldquo;Additional Drivers\u0026rdquo; utility or through the terminal. This may be necessary for graphics cards, Wi-Fi adapters, and more.\n Set Up User Accounts and Passwords #  Create additional user accounts for better security and isolation. To add a new user:\nsudo adduser newusername Make sure to add your user to the sudo group for administrative privileges:\nsudo usermod -aG sudo newusername Change passwords for the root user and your user account:\nsudo passwd root passwd yourusername  System Tweaks and Customization #    Desktop Environment: Customize your desktop environment according to your preferences. This may include changing wallpapers, themes, and settings.\n  Keyboard Shortcuts: Configure keyboard shortcuts for efficiency.\n  Display Settings: Adjust screen resolution, multiple monitor setup, and screen brightness.\n  Software Updates: Set up automatic software updates for security and system stability.\n  Firewall: Enable and configure the firewall (e.g., ufw or iptables) to enhance system security.\n  Time and Date: Set your time zone and synchronize your system clock with network time servers.\n  User Directories: Configure user directories, such as Downloads, Documents, and Pictures, for better organization.\n   Install Essential Software #  Install common Linux tools and utilities, including:\n Text editor (e.g., Vim or Nano) File manager (e.g., Nautilus, Dolphin) Terminal emulator (e.g., GNOME Terminal, Konsole) Archiving tool (e.g., File Roller, Ark) PDF reader (e.g., Evince, Okular) Image viewer (e.g., Eye of GNOME, Gwenview)   Optimize Power Saving for Wi-Fi #  To improve Wi-Fi speed and responsiveness, you can tweak power-saving settings:\n  Disable Wi-Fi Power Saving Mode: By default, Wi-Fi adapters often use power-saving features, which can reduce performance. To disable it temporarily (until the next reboot):\nsudo iwconfig wlan0 power off Replace wlan0 with the name of your Wi-Fi interface.\nTo disable it permanently, you can create a configuration file. Create a file in the /etc/network/if-up.d/ directory, such as /etc/network/if-up.d/wifi-power-off, with the following content:\n#!/bin/sh /sbin/iwconfig wlan0 power off Make it executable with:\nsudo chmod +x /etc/network/if-up.d/wifi-power-off   Tune Network Manager: If you are using NetworkManager, you can edit its configuration to control power management. Open the NetworkManager configuration file:\nsudo nano /etc/NetworkManager/conf.d/default-wifi-powersave-on.conf Change the value from 3 to 2 to disable Wi-Fi power-saving:\n[connection] wifi.powersave = 2 Save the file and restart NetworkManager:\nsudo service network-manager restart    Improve Security #    Firewall: Configure and enable a firewall (e.g., Uncomplicated Firewall, UFW) to control incoming and outgoing traffic.\n  Full Disk Encryption: If it\u0026rsquo;s not already enabled, consider setting up full-disk encryption (e.g., LUKS) to protect your data in case your device gets stolen.\n  ","date":"5 November 2023","permalink":"/posts/linux-setup/","section":"Posts","summary":"Things to Do After Installing a Debian-Based Distro #  Congratulations on installing your Debian-based Linux distribution!","title":"Debian based linux distro Setup"},{"content":" Detailed explanation of commonly used Git commands #   Configuration #   Configure User Information #  Set your name and email address that will be associated with your Git commits:\ngit config --global user.name \u0026#34;Your Name\u0026#34; git config --global user.email \u0026#34;youremail@example.com\u0026#34;  git config is used to set configuration options in Git. --global flag sets the configuration globally for your user.   Creating a Repository #   Initialize a New Repository #  Create a new Git repository in the current directory:\ngit init  git init initializes a new Git repository in the current directory, creating a .git subdirectory that stores Git configuration and version history.   Making Changes #   Add Changes to Staging #  Add modified files to the staging area, preparing them for the next commit:\ngit add \u0026lt;file\u0026gt;  git add stages changes for the next commit. You can specify individual files or directories.   Commit Changes #  Create a commit with staged changes:\ngit commit -m \u0026#34;Your commit message\u0026#34;  git commit creates a new commit with the changes that are in the staging area. The -m flag is used to provide a commit message that briefly describes the changes.   Viewing Status and History #   Check Status #  View the status of your working directory:\ngit status  git status provides information about changes in your working directory and the staging area.   View Commit History #  Display commit history:\ngit log  git log shows a chronological list of commits in the repository, including commit messages, authors, and commit hashes.   Branching and Merging #   Create a New Branch #  Create a new branch based on the current branch:\ngit branch \u0026lt;branchname\u0026gt;  git branch is used to create a new branch. Specify the branch name to create a new branch.   Switch Branch #  Switch to a different branch:\ngit checkout \u0026lt;branchname\u0026gt;  git checkout allows you to switch between branches. Specify the branch name to switch to that branch.   Merge Branch #  Merge changes from one branch into the current branch:\ngit merge \u0026lt;branchname\u0026gt;  git merge combines changes from the specified branch into the current branch, creating a new commit with the merged changes.   Delete Branch #  Delete a branch:\ngit branch -d \u0026lt;branchname\u0026gt;  git branch -d is used to delete a branch that is no longer needed. Use -d to delete a branch if it has been fully merged into other branches.   Remote Repositories #   Add a Remote #  Add a remote repository to your Git configuration:\ngit remote add origin \u0026lt;remote-url\u0026gt;  git remote is used to manage remote repositories. add specifies that you want to add a remote. origin is the commonly used name for the remote, but you can choose a different name. \u0026lt;remote-url\u0026gt; is the URL of the remote repository.   Fetch Changes #  Fetch changes from a remote repository:\ngit fetch  git fetch downloads objects and references from another repository, updating your remote-tracking branches without modifying your working directory.   Push Changes #  Push local changes to a remote repository:\ngit push origin \u0026lt;branchname\u0026gt;  git push sends your local changes to a remote repository. origin is the name of the remote repository. \u0026lt;branchname\u0026gt; specifies the branch you want to push.   Pull Changes #  Pull changes from a remote repository and merge them into your local branch:\ngit pull  git pull combines git fetch and git merge to update your local branch with changes from a remote repository.   Collaborating #   Clone a Repository #  Clone a remote repository to your local machine:\ngit clone \u0026lt;repository-url\u0026gt;  git clone creates a local copy of a remote repository on your computer.   Fork a Repository #  Fork a repository on a platform like GitHub to create your own copy. This is not a Git command but a common step when contributing to open-source projects.\n Create a Pull Request #  Create a pull request to propose changes to the original repository. This is done on platforms like GitHub and GitLab, not through Git commands.\n Review and Merge #  Review pull requests and merge changes in a collaborative environment. This also happens on platforms like GitHub and GitLab, not through Git commands.\n Miscellaneous #   Ignore Files #  Create a .gitignore file to specify which files or directories should be ignored by Git. You can list file patterns, directories, or file extensions that Git should not track.\n View Differences #  View the differences between files in your working directory and the most recent commit:\ngit diff  git diff shows the differences between your working directory and the last committed state.   Help #  Get help on a specific Git command:\ngit --help \u0026lt;command\u0026gt;  Use git --help followed by the command name to get detailed information about a specific Git command.  This detailed explanation covers commonly used Git commands for version control. For more in-depth documentation, you can refer to the Git documentation\n","date":"5 November 2023","permalink":"/posts/git-guide/","section":"Posts","summary":"Detailed explanation of commonly used Git commands #   Configuration #   Configure User Information #  Set your name and email address that will be associated with your Git commits:","title":"Git Guide"},{"content":" Basic vim setup #   [!NOTE] Note Paste the below code in vimrc file\n syntax onfiletype plugin indent onset modelines=0set numberset rulerset visualbellset encoding=utf-8set wrapset textwidth=79set formatoptions=tcqrn1set tabstop=2set shiftwidth=2set softtabstop=2set expandtabset noshiftround\u0026#34; Cursor motionset scrolloff=3set backspace=indent,eol,startset matchpairs+=\u0026lt;:\u0026gt;runtime! macros/matchit.vimnnoremap j gjnnoremap k gkset hiddenset ttyfast\u0026#34; Status barset laststatus=2\u0026#34; Last lineset showmodeset showcmd\u0026#34; Searchingnnoremap / /\\vvnoremap / /\\vset hlsearchset incsearchset ignorecaseset smartcaseset showmatchmap \u0026lt;leader\u0026gt;\u0026lt;space\u0026gt; :let @/=\u0026#39;\u0026#39;\u0026lt;cr\u0026gt; \u0026#34; clear search\u0026#34; Visualize tabs and newlinesset listchars=tab:▸\\ ,eol:¬\u0026#34; Uncomment this to enable by default:\u0026#34; set list \u0026#34; To enable by default\u0026#34; Or use your leader key + l to toggle on/offmap \u0026lt;leader\u0026gt;l :set list!\u0026lt;CR\u0026gt; \u0026#34; Toggle tabs and EOL Here is the complete breakdown: #  syntax on syntax on enables syntax highlighting in Vim. This highlights different elements of your code with different colors to make it more readable and easier to understand.  filetype plugin indent on filetype plugin indent on enables file type detection, which allows Vim to automatically detect the type of file you are editing and apply appropriate settings and plugins for that file type. It also enables automatic indentation based on the file type.  set modelines=0 set modelines=0 disables the reading of modelines. Modelines are special comments in a file that can be used to specify settings for that file. Setting this to 0 means Vim won\u0026rsquo;t read and apply settings from modelines.  set number set number displays line numbers on the left side of the editor, making it easier to reference specific lines in the file.  set ruler set ruler displays the current line and column number in the status line at the bottom of the Vim window.  set visualbell set visualbell replaces the audible bell with a visual bell. When an error or warning occurs, Vim will flash the screen instead of producing a sound.  set encoding=utf-8 set encoding=utf-8 sets the character encoding to UTF-8, which is a widely used encoding for handling a wide range of characters from different languages.  set wrap set wrap enables line wrapping, causing long lines to wrap to the next line if they exceed the screen width.  set textwidth=79 set textwidth=79 sets the maximum line width to 79 characters. This can be useful for ensuring that your code conforms to a specific line length limit.  set formatoptions=tcqrn1 set formatoptions=tcqrn1 sets various formatting options for auto-indentation and text formatting. These options control how Vim formats text as you type.  set tabstop=2set shiftwidth=2set softtabstop=2set expandtabset noshiftround These lines configure indentation settings. They set the tab width to 2 spaces, the number of spaces to use for each level of indentation, and configure tabs to be expanded as spaces.  \u0026#34; Cursor motionset scrolloff=3 set scrolloff=3 configures Vim to keep at least 3 lines of context when scrolling up or down. This helps maintain context while navigating through the file.  set backspace=indent,eol,start set backspace=indent,eol,start allows you to use the Backspace key to delete characters beyond the current indent, at the end of a line, and at the start of insert mode.  set matchpairs+=\u0026lt;:\u0026gt;runtime! macros/matchit.vim These lines configure matching pairs for brackets (\u0026lt;:\u0026gt;). It also loads the matchit.vim plugin, which enhances Vim\u0026rsquo;s ability to jump between matching pairs of characters using the % key.  nnoremap j gjnnoremap k gk These lines create non-recursive key mappings for j and k to make them move by display lines (gj and gk) instead of actual lines. This can be useful when working with wrapped lines.  set hidden set hidden allows you to switch between buffers without saving changes. Unsaved changes are preserved in the background.  set ttyfast set ttyfast optimizes Vim for faster terminal response.  \u0026#34; Status barset laststatus=2 set laststatus=2 ensures that the status bar is always displayed with at least two lines.  \u0026#34; Last lineset showmodeset showcmd These lines enable the display of the current mode (e.g., Normal, Insert) and show partial command input at the bottom of the screen.  \u0026#34; Searchingnnoremap / /\\vvnoremap / /\\vset hlsearchset incsearchset ignorecaseset smartcaseset showmatchmap \u0026lt;leader\u0026gt;\u0026lt;space\u0026gt; :let @/=\u0026#39;\u0026#39;\u0026lt;cr\u0026gt; \u0026#34; clear search These lines configure various aspects of searching and search highlighting in Vim. They also create key mappings for search-related commands and provide a mapping to clear the search pattern using \u0026lt;leader\u0026gt;\u0026lt;space\u0026gt;.  \u0026#34; Visualize tabs and newlinesset listchars=tab:▸\\ ,eol:¬\u0026#34; Uncomment this to enable by default:\u0026#34; set list \u0026#34; To enable by default\u0026#34; Or use your leader key + l to toggle on/offmap \u0026lt;leader\u0026gt;l :set list!\u0026lt;CR\u0026gt; \u0026#34; Toggle tabs and EOL These lines configure how tabs and newlines are visualized. They use special characters to represent tabs (▸) and end-of-line characters (¬). Additionally, there\u0026rsquo;s a key mapping to toggle the visualization of tabs and EOL characters using \u0026lt;leader\u0026gt;l.  This .vimrc file provides various settings and key mappings to enhance your Vim experience. You can customize it further to suit your preferences.\n","date":"5 November 2023","permalink":"/posts/vim-setup/","section":"Posts","summary":"Basic vim setup #   [!","title":"Vim Setup for Competitive Programming"},{"content":"","date":"1 January 0001","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"1 January 0001","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"1 January 0001","permalink":"/series/","section":"Series","summary":"","title":"Series"},{"content":"","date":"1 January 0001","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"}]